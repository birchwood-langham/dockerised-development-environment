#!/usr/bin/env bash

usage() {
  echo "Usage: denv command [options] [suboptions]"
  echo "where  command can be:"
  echo "           stack - start a development stack"
  echo "                   options are:"
  echo "                       dev - a development stack with 1 kafka broker, 1 zookeeper etc."
  echo "                       full - a full stack with 3 kafka brokers, 3 zookeeper etc."
  echo "                   suboptions are:"
  echo "                       up    - crate and start the stack"
  echo "                       down  - stop and destroy the stack"
  echo "                       start - start the existing containers in the stack"
  echo "                       stop  - stop the existing containers without destroying the stack"
  echo "           shell - start an interactive shell in the development environment container"
  echo "                   this command takes no other parameters"
  echo "           run   - run an application from the development environment container"
  echo "                   options are:"
  echo "                        the application you want to run, e.g. idea.sh, Postman"
  echo "           exec  - execute a command from the development environment container"
  echo "                   options are:"
  echo "                        the full command you want to run, e.g. ls -l, ps aux | grep ..."
  echo "           code-server - standalone code-server with no additional services"
  echo "                   options are:"
  echo "                       start - create a standalone code-server container"
  echo "                       stop  - stop and destroy the standalone code-server container"
}

if [ $# != 0 ] && [ $1 == "--help" ]; then
  usage
  exit
fi

if [ "$1" == "" ]; then
  usage
  exit
fi

if [[ -z $USER_NAME ]]; then
  export USER_NAME=$(id -un)
fi 

export USER_ID=$(id -u)
export REGISTRY_ADDRESS=`ip route get 1 | head -1 | sed 's/.*src //g' | cut -d ' ' -f1`

# make sure the docker network exists, and create it if not
# this is to ensure that any containers we create using this script
# connect to the same network and can talk to all the other containers
# that may be deployed
devnet_id=`docker network ls --filter "name=dev-net" -q`

if [[ -z $devnet_id ]]; then 
  echo 'docker network dev-net does not exist, creating...'
  docker network create dev-net
fi

if [[ ! -d $HOME/.config/dev-env/IntelliJIdea ]] || [[ ! -d $HOME/.config/dev-env/logs ]]; then
  mkdir -p $HOME/.config/dev-env/{IntelliJIdea,logs}
fi

if [[ -f $HOME/.config/dev-env/.env ]]; then 
  source $HOME/.config/dev-env/.env
fi

command=$1

case $command in 
  stack)
    shift
    case $1 in
      dev)
        case $2 in 
          up)
            docker-compose -p bl -f $HOME/.config/dev-env/docker-compose.yaml up -d;;
          start)
            docker-compose -p bl -f $HOME/.config/dev-env/docker-compose.yaml start;;
          stop)
            docker-compose -p bl -f $HOME/.config/dev-env/docker-compose.yaml stop;;
          down)
            docker-compose -p bl -f $HOME/.config/dev-env/docker-compose.yaml down;;
          *)
            usage;;
        esac
        ;;
      full)
        case $2 in 
          up)
            docker-compose -p bl -f $HOME/.config/dev-env/docker-compose-full.yaml up -d;;
          start)
            docker-compose -p bl -f $HOME/.config/dev-env/docker-compose-full.yaml start;;
          stop)
            docker-compose -p bl -f $HOME/.config/dev-env/docker-compose-full.yaml stop;;
          down)
            docker-compose -p bl -f $HOME/.config/dev-env/docker-compose-full.yaml down;;
          *)
            usage;;
        esac
        ;;
    esac
    ;;
  run)
    shift
    xhost +local:$(whoami) 1>$HOME/.config/dev-env/logs/dev-env.log 2>$HOME/.config/dev-env/logs/error.log

    dev_process=`docker ps -f name=dev-env -q`

    if [[ -z $dev_process ]]; then
      echo 'The dev environment is not running, creating a new container'

      docker run -d --rm \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /run/user/$(id -u):/run/user/$(id -u) \
        -v $HOME/code:/home/${USER_NAME}/code \
        -v $HOME/.ssh:/home/${USER_NAME}/.ssh \
        -v $HOME/.netrc:/home/${USER_NAME}/.netrc \
        -v $HOME/.gitconfig:/home/${USER_NAME}/.gitconfig \
        -v $HOME/.config/dev-env/IntelliJIdea:/home/${USER_NAME}/.IntelliJIdea2019.3 \
        -v $HOME/.java:/home/${USER_NAME}/.java \
        -v $HOME/.fonts:/home/${USER_NAME}/.fonts \
        -v $HOME/code-server/extensions:/code-server/extensions \
        -v $HOME/code-server/user-data/User:/code-server/user-data/User \
        -e DISPLAY=$DISPLAY \
        -e DBUS_SESSION_BUS_ADDRESS="unix:path=/var/run/user/1000/bus" \
        -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
        -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
        --ipc=host \
        --security-opt=seccomp:unconfined \
        --network dev-net \
        birchwoodlangham/dockerised-development-environment:latest $@ 1>$HOME/.config/dev-env/logs/dev-env.log 2>$HOME/.config/dev-env/logs/error.log
    else
      docker exec -u $USER_NAME $dev_process $@ & 1>$HOME/.config/dev-env/logs/dev-env.log 2>$HOME/.config/dev-env/logs/error.log
    fi
    ;;
  exec)
    dev_process=`docker ps -f name=dev-env -q`

    if [[ -z $dev_process ]]; then
      echo 'Sorry, the dev environment is not running'
      exit 1
    fi

    shift

    docker exec -u $USER_NAME $dev_process $@
    ;;
  shell)
    docker run -it --rm \
      -v /tmp/.X11-unix:/tmp/.X11-unix \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -v /run/user/$(id -u):/run/user/$(id -u) \
      -v $HOME/code:/home/${USER_NAME}/code \
      -v $HOME/.ssh:/home/${USER_NAME}/.ssh \
      -v $HOME/.netrc:/home/${USER_NAME}/.netrc \
      -v $HOME/.gitconfig:/home/${USER_NAME}/.gitconfig \
      -v $HOME/.config/dev-env/IntelliJIdea:/home/${USER_NAME}/.IntelliJIdea2019.3 \
      -v $HOME/.java:/home/${USER_NAME}/.java \
      -v $HOME/.fonts:/home/${USER_NAME}/.fonts \
      -v $HOME/code-server/extensions:/code-server/extensions \
      -v $HOME/code-server/user-data/User:/code-server/user-data/User \
      -e DISPLAY=$DISPLAY \
      -e DBUS_SESSION_BUS_ADDRESS="unix:path=/var/run/user/1000/bus" \
      -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
      -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
      --ipc=host \
      --security-opt=seccomp:unconfined \
      --network dev-net \
      birchwoodlangham/dockerised-development-environment:latest zsh
    ;;
  code-server)
    shift
    case $1 in
      start)
        xhost +local:$(whoami) 1>$HOME/.config/dev-env/logs/dev-env.log 2>$HOME/.config/dev-env/logs/error.log

        docker run -d --rm \
          -v /tmp/.X11-unix:/tmp/.X11-unix \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /run/user/$(id -u):/run/user/$(id -u) \
          -v $HOME/code:/home/${USER_NAME}/code \
          -v $HOME/.ssh:/home/${USER_NAME}/.ssh \
          -v $HOME/.netrc:/home/${USER_NAME}/.netrc \
          -v $HOME/.gitconfig:/home/${USER_NAME}/.gitconfig \
          -v $HOME/.config/dev-env/IntelliJIdea:/home/${USER_NAME}/.IntelliJIdea2019.3 \
          -v $HOME/.java:/home/${USER_NAME}/.java \
          -v $HOME/.fonts:/home/${USER_NAME}/.fonts \
          -v $HOME/code-server/extensions:/code-server/extensions \
          -v $HOME/code-server/user-data/User:/code-server/user-data/User \
          -p 8090:8080 \
          -e DISPLAY=$DISPLAY \
          -e DBUS_SESSION_BUS_ADDRESS="unix:path=/var/run/user/1000/bus" \
          -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
          -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
          --ipc=host \
          --security-opt=seccomp:unconfined \
          --name=dev-env \
          --network dev-net \
          birchwoodlangham/dockerised-development-environment:latest
        ;;
      stop)
        docker stop dev-env
        ;;
      *)
        usage
        ;;  
    esac
    ;;
  *)
    usage
    ;;
esac
